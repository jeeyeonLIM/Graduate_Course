glm.prob2 = predict(glm.fit2, Default[-train,], type="response")
glm.pred2 = ifelse(glm.prob2 > 0.5, "Yes", "No")
table(glm.pred2, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred2)  # test mse
set.seed(157)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit3 = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob3 = predict(glm.fit3, Default[-train,], type="response")
glm.pred3 = ifelse(glm.prob3 > 0.5, "Yes", "No")
table(glm.pred3, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred3)  # test mse
#d
set.seed(1)
train = sample(nrow(Default), nrow(Default)*0.5)
glm.fit = glm(default ~ income + balance + student, data=Default, family=binomial, subset=train)
glm.fit = predict(glm.fit, Default[-train,], type="response")
glm.fit = ifelse(glm.fit > 0.5, "Yes", "No")
mean(Default[-train,]$default != glm.fit)  # test error
set.seed(10)
glm.fit = glm(default ~ income + balance, data = Default, family = "binomial")
summary(glm.fit)
set.seed(10)
glm.fit = glm(default ~ income + balance, data = Default, family = "binomial")
summary(glm.fit)
write.csv( round( summary(glm.fit)$coefficients,3 ) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex4a.csv")
#a
set.seed(10)
glm.fit = glm(default ~ income + balance, data = Default, family = "binomial")
summary(glm.fit)
write.csv( table(glm.pred, Default$default) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex4a.csv")
write.csv( table(glm.pred, Default$default) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex4a.csv")
set.seed(10)
glm.fit = glm(default ~ income + balance, data = Default, family = "binomial")
summary(glm.fit)
write.csv( table(glm.pred, Default$default) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex4a.csv")
set.seed(10)
glm.fit = glm(default ~ income + balance, data = Default, family = "binomial")
summary(glm.fit)
glm.prob = predict(glm.fit, Default[-train,], type="response")
glm.pred = ifelse(glm.prob > 0.5, "Yes", "No")
write.csv( table(glm.pred, Default$default) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex4a.csv")
set.seed(10)
glm.fit = glm(default ~ income + balance, data = Default, family = "binomial")
summary(glm.fit)
glm.prob = predict(glm.fit, Default[-train,], type="response")
glm.pred = ifelse(glm.prob > 0.5, "Yes", "No")
glm.pred
table(glm.pred, Default$default)
length(glm.pred)
length(Default$default)
set.seed(10)
glm.fit = glm(default ~ income + balance, data = Default, family = "binomial")
summary(glm.fit)
glm.prob = predict(glm.fit, Default, type="response")
glm.pred = ifelse(glm.prob > 0.5, "Yes", "No")
write.csv( table(glm.pred, Default$default) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex4a.csv")
#a
set.seed(10)
glm.fit = glm(default ~ income + balance, data = Default, family = "binomial")
summary(glm.fit)
glm.prob = predict(glm.fit, Default, type="response")
glm.pred = ifelse(glm.prob > 0.5, "Yes", "No")
write.csv( table(glm.pred, Default$default) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex4a.csv")
#b
set.seed(10)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob = predict(glm.fit, Default[-train,], type="response")
glm.pred = ifelse(glm.prob > 0.5, "Yes", "No")
table(glm.pred, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred)  # test mse
write.csv( table(glm.pred, Default[-train,]$default) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex4b.csv")
#c
set.seed(5)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit1 = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob1 = predict(glm.fit1, Default[-train,], type="response")
glm.pred1 = ifelse(glm.prob1 > 0.5, "Yes", "No")
table(glm.pred1, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred1)  # test mse
set.seed(14)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit2 = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob2 = predict(glm.fit2, Default[-train,], type="response")
glm.pred2 = ifelse(glm.prob2 > 0.5, "Yes", "No")
table(glm.pred2, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred2)  # test mse
set.seed(157)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit3 = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob3 = predict(glm.fit3, Default[-train,], type="response")
glm.pred3 = ifelse(glm.prob3 > 0.5, "Yes", "No")
table(glm.pred3, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred3)  # test mse
write.csv( table(glm.pred1, Default[-train,]$default) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Exc1.csv")
write.csv( table(glm.pred2, Default[-train,]$default) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Exc2.csv")
write.csv( table(glm.pred3, Default[-train,]$default) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Exc3.csv")
#d
set.seed(1)
train = sample(nrow(Default), nrow(Default)*0.5)
glm.fit = glm(default ~ income + balance + student, data=Default, family=binomial, subset=train)
glm.fit = predict(glm.fit, Default[-train,], type="response")
glm.fit = ifelse(glm.fit > 0.5, "Yes", "No")
mean(Default[-train,]$default != glm.fit)   # test mse
write.csv( table(glm.pred, Default[-train,]$default) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex4d.csv")
set.seed(10)
glm.fit = glm(default ~ income + balance, data = Default, family = "binomial")
summary(glm.fit)
glm.prob = predict(glm.fit, Default, type="response")
glm.pred = ifelse(glm.prob > 0.5, "Yes", "No")
write.csv( round( summary(glm.fit)$coefficients,3 ) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex5a.csv")
#a
set.seed(10)
glm.fit = glm(default ~ income + balance, data = Default, family = "binomial")
summary(glm.fit)
glm.prob = predict(glm.fit, Default, type="response")
glm.pred = ifelse(glm.prob > 0.5, "Yes", "No")
mean(Default$default != glm.pred)
# write.csv( round( summary(glm.fit)$coefficients,3 ) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Ex5a.csv")
# write.csv( table(glm.pred, Default$default) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Ex4a.csv")
#b
set.seed(10)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob = predict(glm.fit, Default[-train,], type="response")
glm.pred = ifelse(glm.prob > 0.5, "Yes", "No")
table(glm.pred, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred)  # test mse
# write.csv( table(glm.pred, Default[-train,]$default) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Ex4b.csv")
#c
set.seed(5)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit1 = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob1 = predict(glm.fit1, Default[-train,], type="response")
glm.pred1 = ifelse(glm.prob1 > 0.5, "Yes", "No")
table(glm.pred1, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred1)  # test mse
set.seed(14)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit2 = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob2 = predict(glm.fit2, Default[-train,], type="response")
glm.pred2 = ifelse(glm.prob2 > 0.5, "Yes", "No")
table(glm.pred2, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred2)  # test mse
set.seed(157)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit3 = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob3 = predict(glm.fit3, Default[-train,], type="response")
glm.pred3 = ifelse(glm.prob3 > 0.5, "Yes", "No")
table(glm.pred3, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred3)  # test mse
# write.csv( table(glm.pred1, Default[-train,]$default) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Exc1.csv")
# write.csv( table(glm.pred2, Default[-train,]$default) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Exc2.csv")
# write.csv( table(glm.pred3, Default[-train,]$default) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Exc3.csv")
#d
set.seed(1)
train = sample(nrow(Default), nrow(Default)*0.5)
glm.fit = glm(default ~ income + balance + student, data=Default, family=binomial, subset=train)
glm.fit = predict(glm.fit, Default[-train,], type="response")
glm.fit = ifelse(glm.fit > 0.5, "Yes", "No")
mean(Default[-train,]$default != glm.fit)   # test mse
# write.csv( table(glm.pred, Default[-train,]$default) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Ex4d.csv")
set.seed(5)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit1 = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob1 = predict(glm.fit1, Default[-train,], type="response")
glm.pred1 = ifelse(glm.prob1 > 0.5, "Yes", "No")
table(glm.pred1, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred1)  # test mse
#a
set.seed(10)
glm.fit = glm(default ~ income + balance, data = Default, family = "binomial")
summary(glm.fit)
glm.prob = predict(glm.fit, Default, type="response")
glm.pred = ifelse(glm.prob > 0.5, "Yes", "No")
mean(Default$default != glm.pred)
# write.csv( round( summary(glm.fit)$coefficients,3 ) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Ex5a.csv")
# write.csv( table(glm.pred, Default$default) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Ex4a.csv")
#b
set.seed(10)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob = predict(glm.fit, Default[-train,], type="response")
glm.pred = ifelse(glm.prob > 0.5, "Yes", "No")
table(glm.pred, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred)  # test mse
# write.csv( table(glm.pred, Default[-train,]$default) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Ex4b.csv")
#c
set.seed(5)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit1 = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob1 = predict(glm.fit1, Default[-train,], type="response")
glm.pred1 = ifelse(glm.prob1 > 0.5, "Yes", "No")
table(glm.pred1, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred1)  # test mse
set.seed(14)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit2 = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob2 = predict(glm.fit2, Default[-train,], type="response")
glm.pred2 = ifelse(glm.prob2 > 0.5, "Yes", "No")
table(glm.pred2, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred2)  # test mse
set.seed(157)
train = sample( nrow(Default), nrow(Default)*0.5 )
glm.fit3 = glm(default ~ income + balance, data=Default, family=binomial, subset=train)
glm.prob3 = predict(glm.fit3, Default[-train,], type="response")
glm.pred3 = ifelse(glm.prob3 > 0.5, "Yes", "No")
table(glm.pred3, Default[-train,]$default)
mean(Default[-train,]$default != glm.pred3)  # test mse
# write.csv( table(glm.pred1, Default[-train,]$default) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Exc1.csv")
# write.csv( table(glm.pred2, Default[-train,]$default) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Exc2.csv")
# write.csv( table(glm.pred3, Default[-train,]$default) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Exc3.csv")
#d
set.seed(1)
train = sample(nrow(Default), nrow(Default)*0.5)
glm.fit = glm(default ~ income + balance + student, data=Default, family=binomial, subset=train)
glm.fit = predict(glm.fit, Default[-train,], type="response")
glm.fit = ifelse(glm.fit > 0.5, "Yes", "No")
mean(Default[-train,]$default != glm.fit)   # test mse
# write.csv( table(glm.pred, Default[-train,]$default) ,
#            "C:/Users/jeeyeon/Desktop/데마/HW5/Ex4d.csv")
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
summary(glm.fit)
#a
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
summary(glm.fit)
#b
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, subset = 2:nrow(Weekly), family = "binomial")
summary(glm.fit)
#c
#d
#e
#c
ifelse(predict(fit2, Weekly[1,], type="response")>0.5, "Up", "Down")
Weekly[1,]$Direction
ifelse(predict(fit2, Weekly[1,], type="response")>0.5, "Up", "Down")
ifelse(predict(glm.fit, Weekly[1,], type="response")>0.5, "Up", "Down")
Weekly[1,]$Direction
ifelse(predict(glm.fit, Weekly, type="response")>0.5, "Up", "Down")
Weekly$Direction
#c
ifelse(predict(glm.fit, Weekly, type="response")>0.5, "Up", "Down")[1]
Weekly$Direction[1]
ifelse(predict(glm.fit, Weekly, type="response")>0.5, "Up", "Down")[1]
Weekly$Direction[1]
#c
c(ifelse(predict(glm.fit, Weekly, type="response")>0.5, "Up", "Down")[1], Weekly$Direction[1])
Weekly$Direction
#c
ifelse(predict(glm.fit, Weekly, type="response")>0.5, "Up", "Down")[1]
Weekly$Direction
Weekly$Direction[1]
Weekly$Direction[1]
ifelse(predict(glm.fit, Weekly, type="response")>0.5, "Up", "Down")[1]
ifelse(predict(glm.fit, Weekly, type="response")>0.5, "Up", "Down")[1]
Weekly$Direction[1]
set.seed(1)
for (i in 1:nrow(Weekly)) {
myfit = glm(Direction ~ Lag1 + Lag2, data=Weekly[-i,], family=binomial)
mypred = ifelse(predict(myfit, Weekly[1,], type="response")>0.5, "Up", "Down")
LOOCV[i] = ifelse(Weekly[i,]$Direction==mypred, 0, 1)
}
set.seed(1)
loocv.err <- c()
for (i in 1:nrow(Weekly)) {
myfit = glm(Direction ~ Lag1 + Lag2, data=Weekly[-i,], family=binomial)
mypred = ifelse(predict(myfit, Weekly[1,], type="response")>0.5, "Up", "Down")
LOOCV[i] = ifelse(Weekly[i,]$Direction==mypred, 0, 1)
}
set.seed(1)
LOOCV <- c()
for (i in 1:nrow(Weekly)) {
myfit = glm(Direction ~ Lag1 + Lag2, data=Weekly[-i,], family=binomial)
mypred = ifelse(predict(myfit, Weekly[1,], type="response")>0.5, "Up", "Down")
LOOCV[i] = ifelse(Weekly[i,]$Direction==mypred, 0, 1)
}
str(LOOCV)
#a
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
summary(glm.fit)
#b
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, subset = 2:nrow(Weekly), family = "binomial")
summary(glm.fit)
#c
ifelse(predict(glm.fit, Weekly, type="response")>0.5, "Up", "Down")[1]
Weekly$Direction[1]
#d
set.seed(1)
LOOCV <- c()
for (i in 1:nrow(Weekly)) {
myfit = glm(Direction ~ Lag1 + Lag2, data=Weekly[-i,], family=binomial)
mypred = ifelse(predict(myfit, Weekly[1,], type="response")>0.5, "Up", "Down")
LOOCV[i] = ifelse(Weekly[i,]$Direction==mypred, 0, 1)
}
str(LOOCV)
#e
mean(LOOCV)
#a
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
summary(glm.fit)
#b
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, subset = 2:nrow(Weekly), family = "binomial")
summary(glm.fit)
#c
ifelse(predict(glm.fit, Weekly, type="response")>0.5, "Up", "Down")[1]
Weekly$Direction[1]
#d
set.seed(1)
LOOCV <- c()
for (i in 1:nrow(Weekly)) {
glm.fit = glm(Direction ~ Lag1 + Lag2, data=Weekly[-i,], family=binomial)
glm.pred = ifelse(predict(glm.fit, Weekly[1,], type="response")>0.5, "Up", "Down")
LOOCV[i] = ifelse(Weekly[i,]$Direction==glm.pred, 0, 1)
}
str(LOOCV)
#e
mean(LOOCV)
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
summary(glm.fit)
write.csv( table(glm.fit, Weekly$Direction) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex7a.csv")
#a
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
#a
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
summary(glm.fit)
write.csv( table(glm.fit, Weekly$Direction) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex7a.csv")
#a
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
summary(glm.fit)
write.csv( table(glm.fit, Weekly$Direction) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex7a.csv")
table(glm.fit, Weekly$Direction)
#a
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
summary(glm.fit)
glm.prob = predict(glm.fit, Default[-train,], type="response")
#a
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
summary(glm.fit)
glm.prob = predict(glm.fit, Weekly, type="response")
glm.pred = ifelse(glm.prob > 0.5, "Yes", "No")
write.csv( table(glm.pred, Weekly$Direction) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex7a.csv")
#a
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
summary(glm.fit)
write.csv( round( summary(glm.fit),2) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex7a.csv")
write.csv( round( summary(glm.fit)$coef,2) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex7a.csv")
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
summary(glm.fit)
write.csv( round( summary(glm.fit)$coef,2) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex7a.csv")
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, family = "binomial")
summary(glm.fit)
write.csv( round( summary(glm.fit)$coef,2) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex7a.csv")
#b
glm.fit = glm(Direction ~ Lag1 + Lag2 , data = Weekly, subset = 2:nrow(Weekly), family = "binomial")
summary(glm.fit)
write.csv( round( summary(glm.fit)$coef,2) ,
"C:/Users/jeeyeon/Desktop/데마/HW5/Ex7b.csv")
summary(glm.fit)
#c
ifelse(predict(glm.fit, Weekly, type="response")>0.5, "Up", "Down")[1]
Weekly$Direction[1]
Weekly$Direction[1]
Weekly$Direction[1]
set.seed(1)
LOOCV <- c()
for (i in 1:nrow(Weekly)) {
glm.fit = glm(Direction ~ Lag1 + Lag2, data=Weekly[-i,], family=binomial)
glm.pred = ifelse(predict(glm.fit, Weekly[1,], type="response")>0.5, "Up", "Down")
LOOCV[i] = ifelse(Weekly[i,]$Direction==glm.pred, 0, 1)
}
str(LOOCV)
#e
mean(LOOCV)
#a
mean(Boston$medv)
library(ISLR)
library(tidyverse)
library(MASS)
library(ISLR)
library(tidyverse)
library(MASS)
library(boot)
#a
mean(Boston$medv)
#b
sd(Boston$medv)/sqrt(nrow(Boston))
#c
set.seed(1)
mean.fn <- function(var, id) {
return(mean(var[id]))
}
(boot.res <- boot(Boston$medv, mean.fn, R=100))
#d
boot.res$t0 - 2*sd(boot.res$t)  # lower bound
boot.res$t0 + 2*sd(boot.res$t)  # upper bound
t.test(Boston$medv)
#e
median(Boston$medv)
#f
set.seed(1)
median.fn <- function(var, id) {
return(median(var[id]))
}
(boot.res <- boot(Boston$medv, median.fn, R=100))
#g
quantile(Boston$medv, 0.1)
#h
set.seed(1)
quantile10.fn <- function(var, id) {
return(quantile(var[id], 0.1))
}
boot(Boston$medv, quantile10.fn, R=100)
set.seed(1)
mean.fn <- function(var, id) {
return( mean(var[id]) )
}
boot(Boston$medv, mean.fn, R=100)
#d
boot.res$t0 - 2*sd(boot.res$t)  # lower bound
boot.res$t0 + 2*sd(boot.res$t)  # upper bound
t.test(Boston$medv)
#e
median(Boston$medv)
#g
quantile(Boston$medv, 0.1)
t.test(Boston$medv)
library(ISLR)
library(tidyverse)
library(MASS)
library(boot)
set.seed(2)
train=sample(392,196)
lm.fit=lm(mpg~horsepower,data=Auto,subset=train)
lm.fit2=lm(mpg~poly(horsepower,2),data=Auto,subset=train)
lm.fit3=lm(mpg~poly(horsepower,3),data=Auto,subset=train)
# test set MSE : (y-yhat)^2
attach(Auto)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
set.seed(1)
train=sample(392,196)
lm.fit=lm(mpg~horsepower,data=Auto,subset=train)
lm.fit2=lm(mpg~poly(horsepower,2),data=Auto,subset=train)
lm.fit3=lm(mpg~poly(horsepower,3),data=Auto,subset=train)
# test set MSE : (y-yhat)^2
attach(Auto)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
library(boot)
glm.fit=glm(mpg~horsepower,data=Auto)
cv.err=cv.glm(Auto,glm.fit)
cv.err$delta
cv.error=rep(0,5)
for (i in 1:5){
glm.fit=glm(mpg~poly(horsepower,i),data=Auto)
cv.error[i]=cv.glm(Auto,glm.fit)$delta[1]
}
cv.error
alpha.fn=function(data,index){
X=data$X[index]
Y=data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(Portfolio,1:100) # 100개 관측치를 사용해서 alpha 추정해줌
set.seed(1)
alpha.fn(Portfolio,sample(100,100,replace=T)) # 1~100까지 범위의 100개 관측치를 랜덤 복원추출
boot(Portfolio,alpha.fn,R=1000)
boot.fn=function(data,index)
return(coef(lm(mpg~horsepower,data=data,subset=index)))
boot.fn(Auto,1:392)
set.seed(1)
boot.fn(Auto,sample(392,392,replace=T))
boot.fn(Auto,sample(392,392,replace=T))
boot(Auto,boot.fn,1000)
summary(lm(mpg~horsepower,data=Auto))$coef
