lambdas = 10^seq(-10, -0.2, by = 0.1)
train.errors = rep(0, length(lambdas))
test.errors = rep(0, length(lambdas))
for (i in 1:length(lambdas)) {
boost.hitters = gbm(Salary ~ ., data = Hitters[train_index,], distribution = "gaussian",
n.trees = 1000, shrinkage = lambdas[i])
train.pred = predict(boost.hitters, Hitters.train, n.trees = 1000)
test.pred = predict(boost.hitters, Hitters.test, n.trees = 1000)
train.errors[i] = mean((Hitters.train$Salary - train.pred)^2)
test.errors[i] = mean((Hitters.test$Salary - test.pred)^2)
}
#c
library(gbm)
#c
library(gbm)
set.seed(1)
#c
library(gbm)
set.seed(1)
boost.hitters = gbm(Salary~., data = Hitters[train_index,], distribution = "gaussian", n.trees= 1000,
interaction.depth = 4)
#a
data(Hitters)
dim(Hitters)
#d
plot(lambdas, test.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Test MSE", pch = 20)
Hitters
Hitters
#a
data(Hitters)
dim(Hitters)
#a
library(ISLR)
data(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
sum(is.na(Hitters$Salary))
Hitters = Hitters %>% filter(!is.na(Salary)) %>% mutate(Salary = log(Salary))
dim(Hitters)
sum(is.na(Hitters$Salary))
#a
library(ISLR)
library(dplyr)
sum(is.na(Hitters$Salary))
Hitters = Hitters %>% filter(!is.na(Salary)) %>% mutate(Salary = log(Salary))
dim(Hitters)
sum(is.na(Hitters$Salary))
#b
train_index = c(1:200)
train = Hitters[train_index,]
test = Hitters[-train_index,]
#c
library(gbm)
set.seed(103)
lambdas = 10^seq(-10, -0.2, by = 0.1)
train.errors = rep(0, length(lambdas))
test.errors = rep(0, length(lambdas))
for (i in 1:length(lambdas)) {
boost.hitters = gbm(Salary ~ .,data=train,distribution="gaussian",n.trees=1000, shrinkage=lambdas[i])
train.pred = predict(boost.hitters, train, n.trees = 1000)
test.pred = predict(boost.hitters, test, n.trees = 1000)
train.errors[i] = mean((train$Salary - train.pred)^2)
test.errors[i] = mean((train$Salary - test.pred)^2)
}
for (i in 1:length(lambdas)) {
boost.hitters = gbm(Salary ~ .,data=train,distribution="gaussian",n.trees=1000, shrinkage=lambdas[i])
train.pred = predict(boost.hitters, train, n.trees = 1000)
test.pred = predict(boost.hitters, test, n.trees = 1000)
train.errors[i] = mean((train$Salary - train.pred)^2)
test.errors[i] = mean((train$Salary - test.pred)^2)
}
plot(lambdas, train.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Train MSE", pch = 20)
#d
plot(lambdas, test.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Test MSE", pch = 20)
library(ISLR)
library(dplyr)
data(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters = Hitters %>% filter(!is.na(Salary)) %>% mutate(Salary = log(Salary))
dim(Hitters)
sum(is.na(Hitters$Salary))
#b
train_index = c(1:200)
train = Hitters[train_index,]
test = Hitters[-train_index,]
#c
library(gbm)
set.seed(103)
lambdas = 10^seq(-10, -0.2, by = 0.1)
train.errors = rep(0, length(lambdas))
test.errors = rep(0, length(lambdas))
for (i in 1:length(lambdas)) {
boost.hitters = gbm(Salary ~ .,data=train,distribution="gaussian",n.trees=1000, shrinkage=lambdas[i])
train.pred = predict(boost.hitters, train, n.trees = 1000)
test.pred = predict(boost.hitters, test, n.trees = 1000)
train.errors[i] = mean((train$Salary - train.pred)^2)
test.errors[i] = mean((train$Salary - test.pred)^2)
}
plot(lambdas, train.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Train MSE", pch = 20)
#d
plot(lambdas, test.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Test MSE", pch = 20)
min(test.errors)
min(test.errors)
lambdas[which.min(test.errors)]
options(scipen = 100)
min(test.errors)
lambdas[which.min(test.errors)]
#c
library(gbm)
set.seed(5)
lambdas = 10^seq(-10, -0.2, by = 0.1)
train.errors = rep(0, length(lambdas))
test.errors = rep(0, length(lambdas))
for (i in 1:length(lambdas)) {
boost.hitters = gbm(Salary ~ .,data=train,distribution="gaussian",n.trees=1000, shrinkage=lambdas[i])
train.pred = predict(boost.hitters, train, n.trees = 1000)
test.pred = predict(boost.hitters, test, n.trees = 1000)
train.errors[i] = mean((train$Salary - train.pred)^2)
test.errors[i] = mean((train$Salary - test.pred)^2)
}
plot(lambdas, train.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Train MSE", pch = 20)
#d
plot(lambdas, test.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Test MSE", pch = 20)
min(test.errors)
lambdas[which.min(test.errors)]
lm.fit = lm(Salary ~ ., data = train)
lm.pred = predict(lm.fit,test)
mean((test$Salary - lm.pred)^2) # testMSE in lm
# Lasso Fit
library(glmnet)
set.seed(134)
x = model.matrix(Salary ~ ., data = train)
y = train$Salary
x.test = model.matrix(Salary ~ ., data = test)
ridge.fit = glmnet(x, y, alpha = 0) # Lidge
lasso.fit = glmnet(x, y, alpha = 1) # Lasso
ridge.pred = predict(ridge.fit, s = 0.01, newx = x.test)
lasso.pred = predict(lasso.fit, s = 0.01, newx = x.test)
mean((test$Salary - ridge.pred)^2)
mean((test$Salary - lasso.pred)^2)
min(train.errors)
lambdas[which.min(train.errors)]
#c
library(gbm)
set.seed(5)
lambdas = 10^seq(-10, -0, by = 0.1)
train.errors = rep(0, length(lambdas))
test.errors = rep(0, length(lambdas))
for (i in 1:length(lambdas)) {
boost.hitters = gbm(Salary ~ .,data=train,distribution="gaussian",n.trees=1000, shrinkage=lambdas[i])
train.pred = predict(boost.hitters, train, n.trees = 1000)
test.pred = predict(boost.hitters, test, n.trees = 1000)
train.errors[i] = mean((train$Salary - train.pred)^2)
test.errors[i] = mean((train$Salary - test.pred)^2)
}
plot(lambdas, train.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Train MSE", pch = 20)
min(train.errors)
lambdas[which.min(train.errors)]
#d
plot(lambdas, test.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Test MSE", pch = 20)
min(test.errors)
lambdas[which.min(test.errors)]
library(gbm)
set.seed(5)
lambdas = 10^seq(-10, 5, by = 0.1)
train.errors = rep(0, length(lambdas))
test.errors = rep(0, length(lambdas))
for (i in 1:length(lambdas)) {
boost.hitters = gbm(Salary ~ .,data=train,distribution="gaussian",n.trees=1000, shrinkage=lambdas[i])
train.pred = predict(boost.hitters, train, n.trees = 1000)
test.pred = predict(boost.hitters, test, n.trees = 1000)
train.errors[i] = mean((train$Salary - train.pred)^2)
test.errors[i] = mean((train$Salary - test.pred)^2)
}
plot(lambdas, train.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Train MSE", pch = 20)
min(train.errors)
lambdas[which.min(train.errors)]
#d
plot(lambdas, test.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Test MSE", pch = 20)
min(test.errors)
lambdas[which.min(test.errors)]
library(gbm)
set.seed(5)
lambdas = 10^seq(-10, 2, by = 0.1)
train.errors = rep(0, length(lambdas))
test.errors = rep(0, length(lambdas))
for (i in 1:length(lambdas)) {
boost.hitters = gbm(Salary ~ .,data=train,distribution="gaussian",n.trees=1000, shrinkage=lambdas[i])
train.pred = predict(boost.hitters, train, n.trees = 1000)
test.pred = predict(boost.hitters, test, n.trees = 1000)
train.errors[i] = mean((train$Salary - train.pred)^2)
test.errors[i] = mean((train$Salary - test.pred)^2)
}
plot(lambdas, train.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Train MSE", pch = 20)
min(train.errors)
lambdas[which.min(train.errors)]
#d
plot(lambdas, test.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Test MSE", pch = 20)
min(test.errors)
lambdas[which.min(test.errors)]
#c
library(gbm)
set.seed(5)
lambdas = 10^seq(-10,1.2, by = 0.1)
train.errors = rep(0, length(lambdas))
test.errors = rep(0, length(lambdas))
for (i in 1:length(lambdas)) {
boost.hitters = gbm(Salary ~ .,data=train,distribution="gaussian",n.trees=1000, shrinkage=lambdas[i])
train.pred = predict(boost.hitters, train, n.trees = 1000)
test.pred = predict(boost.hitters, test, n.trees = 1000)
train.errors[i] = mean((train$Salary - train.pred)^2)
test.errors[i] = mean((train$Salary - test.pred)^2)
}
plot(lambdas, train.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Train MSE", pch = 20)
min(train.errors)
lambdas[which.min(train.errors)]
#d
plot(lambdas, test.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Test MSE", pch = 20)
min(test.errors)
lambdas[which.min(test.errors)]
#c
library(gbm)
set.seed(5)
lambdas = 10^seq(-10,0, by = 0.1)
train.errors = rep(0, length(lambdas))
test.errors = rep(0, length(lambdas))
for (i in 1:length(lambdas)) {
boost.hitters = gbm(Salary ~ .,data=train,distribution="gaussian",n.trees=1000, shrinkage=lambdas[i])
train.pred = predict(boost.hitters, train, n.trees = 1000)
test.pred = predict(boost.hitters, test, n.trees = 1000)
train.errors[i] = mean((train$Salary - train.pred)^2)
test.errors[i] = mean((train$Salary - test.pred)^2)
}
plot(lambdas, train.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Train MSE", pch = 20)
min(train.errors)
lambdas[which.min(train.errors)]
#d
plot(lambdas, test.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Test MSE", pch = 20)
min(test.errors)
lambdas[which.min(test.errors)]
#c
library(gbm)
set.seed(103)
lambdas = 10^seq(-10,0, by = 0.1)
train.errors = rep(0, length(lambdas))
test.errors = rep(0, length(lambdas))
for (i in 1:length(lambdas)) {
boost.hitters = gbm(Salary ~ .,data=train,distribution="gaussian",n.trees=1000, shrinkage=lambdas[i])
train.pred = predict(boost.hitters, train, n.trees = 1000)
test.pred = predict(boost.hitters, test, n.trees = 1000)
train.errors[i] = mean((train$Salary - train.pred)^2)
test.errors[i] = mean((train$Salary - test.pred)^2)
}
plot(lambdas, train.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Train MSE", pch = 20)
#d
plot(lambdas, test.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Test MSE", pch = 20)
min(test.errors)
lambdas[which.min(test.errors)]
library(gbm)
set.seed(103)
lambdas = 10^seq(-10,0, by = 0.1)
train.errors = rep(0, length(lambdas))
test.errors = rep(0, length(lambdas))
for (i in 1:length(lambdas)) {
boost.hitters = gbm(Salary ~ .,data=train,distribution="gaussian",n.trees=1000, shrinkage=lambdas[i])
train.pred = predict(boost.hitters, train, n.trees = 1000)
test.pred = predict(boost.hitters, test, n.trees = 1000)
train.errors[i] = mean((train$Salary - train.pred)^2)
test.errors[i] = mean((train$Salary - test.pred)^2)
}
plot(lambdas, train.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Train MSE", pch = 20)
min(train.errors)
lambdas[which.min(train.errors)]
#d
plot(lambdas, test.errors, type = "b", xlab = "lambda(Shrinkage para)", ylab = "Test MSE", pch = 20)
min(test.errors)
lambdas[which.min(test.errors)]
lm.fit = lm(Salary ~ ., data = train)
lm.pred = predict(lm.fit,test)
mean((test$Salary - lm.pred)^2) # testMSE in lm
# Lasso Fit
library(glmnet)
set.seed(134)
x = model.matrix(Salary ~ ., data = train)
y = train$Salary
x.test = model.matrix(Salary ~ ., data = test)
ridge.fit = glmnet(x, y, alpha = 0) # Lidge
lasso.fit = glmnet(x, y, alpha = 1) # Lasso
ridge.pred = predict(ridge.fit, s = 0.01, newx = x.test)
lasso.pred = predict(lasso.fit, s = 0.01, newx = x.test)
mean((test$Salary - ridge.pred)^2)
mean((test$Salary - lasso.pred)^2)
#f
boost.best = gbm(Salary ~ ., data = train, distribution = "gaussian",
n.trees = 1000, shrinkage = lambdas[which.min(test.errors)])
summary(boost.best)
set.seed(1)
rf.hitters = randomForest(Salary ~ ., data = train, ntree = 500, mtry = 19)
rf.pred = predict(rf.hitters, test)
mean((test$Salary - rf.pred)^2)
#g
library(randomForest)
set.seed(1)
rf.hitters = randomForest(Salary ~ ., data = train, ntree = 500, mtry = 19)
rf.pred = predict(rf.hitters, test)
mean((test$Salary - rf.pred)^2)
summary(boost.best)
